#pragma once

#ifdef __cplusplus
extern "C" {
#endif

enum gfx_module_type { GFX_MODULE_DX11, GFX_MODULE_OPENGL, GFX_MODULE_INVALID };

enum gfx_shader_var_type {
	GFX_SHADER_VAR_BOOL,
	GFX_SHADER_VAR_S32,
	GFX_SHADER_VAR_U32,
	GFX_SHADER_VAR_F32,
	GFX_SHADER_VAR_F64,
	GFX_SHADER_VAR_VEC2,
	GFX_SHADER_VAR_VEC3,
	GFX_SHADER_VAR_VEC4,
	GFX_SHADER_VAR_MAT4,
	GFX_SHADER_VAR_TEX,
	GFX_SHADER_VAR_UNKNOWN
};

enum gfx_shader_type {
	GFX_SHADER_VERTEX,
	GFX_SHADER_PIXEL,
	GFX_SHADER_COMPUTE,
	GFX_SHADER_GEOMETRY,
	GFX_SHADER_UNKNOWN
};

// enum gfx_pixel_format {
// 	GFX_FORMAT_BGRA,
// 	GFX_FORMAT_FIRST = GFX_FORMAT_BGRA,
// 	GFX_FORMAT_RGBA,
// 	GFX_FORMAT_ARGB,
// 	GFX_FORMAT_RGB24,
// 	GFX_FORMAT_NV12,
// 	GFX_FORMAT_DEPTH_U16,
// 	GFX_FORMAT_DEPTH_U24,
// 	GFX_FORMAT_DEPTH_F32,
// 	GFX_FORMAT_UNKNOWN,
// 	GFX_FORMAT_LAST = GFX_FORMAT_UNKNOWN
// };

enum gfx_texture_type {
	GFX_TEXTURE_1D,
	GFX_TEXTURE_2D,
	GFX_TEXTURE_3D,
	GFX_TEXTURE_CUBE,
	GFX_TEXTURE_UNKNOWN
};

enum gfx_topology {
	GFX_TOPOLOGY_POINT_LIST,
	GFX_TOPOLOGY_LINE_LIST,
	GFX_TOPOLOGY_LINE_STRIP,
	GFX_TOPOLOGY_TRIANGLE_LIST,
	GFX_TOPOLOGY_TRIANGLE_STRIP
};

enum gfx_culling_mode {
	GFX_CULLING_NONE,
	GFX_CULLING_FRONT_FACE,
	GFX_CULLING_BACK_FACE,
};

enum gfx_blend_mode {
	GFX_BLEND_ZERO,
	GFX_BLEND_ONE,
	GFX_BLEND_SRCCOLOR,
	GFX_BLEND_INVSRCCOLOR,
	GFX_BLEND_SRCALPHA,
	GFX_BLEND_INVSRCALPHA,
	GFX_BLEND_DSTCOLOR,
	GFX_BLEND_INVDSTCOLOR,
	GFX_BLEND_DSTALPHA,
	GFX_BLEND_INVDSTALPHA,
	GFX_BLEND_SRCALPHASAT,
};

enum gfx_blend_op {
	GFX_BLEND_OP_ADD,
	GFX_BLEND_OP_SUBTRACT,
	GFX_BLEND_OP_REVERSE_SUBTRACT,
	GFX_BLEND_OP_MIN,
	GFX_BLEND_OP_MAX
};

enum gfx_stencil_op {
	GFX_STENCIL_OP_KEEP,
	GFX_STENCIL_OP_ZERO,
	GFX_STENCIL_OP_REPLACE,
	GFX_STENCIL_OP_INCR,
	GFX_STENCIL_OP_DECR,
	GFX_STENCIL_OP_INVERT,
};

enum gfx_depth_func {
	GFX_DEPTH_FUNC_NEVER,
	GFX_DEPTH_FUNC_LESS,
	GFX_DEPTH_FUNC_EQUAL,
	GFX_DEPTH_FUNC_LEQUAL,
	GFX_DEPTH_FUNC_GREATER,
	GFX_DEPTH_FUNC_NOTEQUAL,
	GFX_DEPTH_FUNC_GEQUAL,
	GFX_DEPTH_FUNC_ALWAYS
};

enum gfx_stencil_func {
	GFX_STENCIL_FUNC_NEVER,
	GFX_STENCIL_FUNC_LESS,
	GFX_STENCIL_FUNC_EQUAL,
	GFX_STENCIL_FUNC_LEQUAL,
	GFX_STENCIL_FUNC_GREATER,
	GFX_STENCIL_FUNC_NOTEQUAL,
	GFX_STENCIL_FUNC_GEQUAL,
	GFX_STENCIL_FUNC_ALWAYS
};

enum gfx_winding_order { GFX_WINDING_CW, GFX_WINDING_CCW };

enum gfx_raster_flags {
	GFX_RASTER_SCISSOR = (1 << 0),
	GFX_RASTER_MULTI_SAMPLE = (1 << 1),
	GFX_RASTER_WIREFRAME = (1 << 2),
	GFX_RASTER_ANTIALIAS_LINES = (1 << 3),
};

enum gfx_sample_filter {
	GFX_FILTER_POINT,
	GFX_FILTER_LINEAR,
	GFX_FILTER_ANISOTROPIC,
	GFX_FILTER_MIN_MAG_POINT_MIP_LINEAR,
	GFX_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
	GFX_FILTER_MIN_POINT_MAG_MIP_LINEAR,
	GFX_FILTER_MIN_LINEAR_MAG_MIP_POINT,
	GFX_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
	GFX_FILTER_MIN_MAG_LINEAR_MIP_POINT,
};

enum gfx_sample_address_mode {
	GFX_SAMPLE_ADDRESS_WRAP,
	GFX_SAMPLE_ADDRESS_CLAMP,
	GFX_SAMPLE_ADDRESS_MIRROR,
	GFX_SAMPLE_ADDRESS_BORDER,
	GFX_SAMPLE_ADDRESS_MIRROR_ONCE,
};

enum gfx_texture_flags {
	GFX_TEXTURE_SHARED = (1 << 0),
	GFX_TEXTURE_KEYED_MUTEX = (1 << 1),
	GFX_TEXTURE_DYNAMIC = (1 << 2),
	GFX_TEXTURE_IS_RENDER_TARGET = (1 << 3),
	GFX_TEXTURE_IS_ZSTENCIL = (1 << 4),
	GFX_TEXTURE_GENERATE_MIPMAPS = (1 << 5),
};

enum gfx_buffer_type {
	GFX_BUFFER_VERTEX,
	GFX_BUFFER_INDEX,
	GFX_BUFFER_CONSTANT,
	GFX_BUFFER_UNKNOWN
};

enum gfx_buffer_usage {
	GFX_BUFFER_USAGE_DEFAULT,
	GFX_BUFFER_USAGE_DYNAMIC,
	GFX_BUFFER_USAGE_IMMUTABLE,
	GFX_BUFFER_USAGE_STAGING,
	GFX_BUFFER_USAGE_UNKNOWN
};

enum gfx_vertex_type {
	GFX_VERTEX_ID = 0,
	GFX_VERTEX_FIRST = GFX_VERTEX_ID,
	GFX_VERTEX_POS_UV,
	GFX_VERTEX_POS_NORM_UV,
	GFX_VERTEX_POS_COLOR,
	GFX_VERTEX_POS_NORM_COLOR,
	GFX_VERTEX_UNKNOWN,
	GFX_VERTEX_LAST = GFX_VERTEX_UNKNOWN
};

enum gfx_vertex_attribute {
	GFX_VERTEX_POS,
	GFX_VERTEX_UV,
	GFX_VERTEX_COLOR,
};

enum gfx_display_orientation {
	GFX_DISPLAY_ORIENTATION_0 = 0,
	GFX_DISPLAY_ORIENTATION_LANDSCAPE = GFX_DISPLAY_ORIENTATION_0,
	GFX_DISPLAY_ORIENTATION_90 = 1,
	GFX_DISPLAY_ORIENTATION_PORTRAIT = GFX_DISPLAY_ORIENTATION_90,
	GFX_DISPLAY_ORIENTATION_180 = 2,
	GFX_DISPLAY_ORIENTATION_LANDSCAPE_FLIPPED = GFX_DISPLAY_ORIENTATION_180,
	GFX_DISPLAY_ORIENTATION_270 = 3,
	GFX_DISPLAY_ORIENTATION_PORTRAIT_FLIPPED = GFX_DISPLAY_ORIENTATION_270
};

enum gfx_projection {
	GFX_PROJECTION_PERSPECTIVE,
	GFX_PROJECTION_ORTHOGRAPIC,
};

typedef enum {
	GFX_D3D11 = 1 << 0,
	GFX_OPENGL = 1 << 1,
	GFX_USE_ZBUFFER = 1 << 2,
	GFX_INVALID = 1 << 3
} gfx_system_flags;

#ifdef __cplusplus
}
#endif
