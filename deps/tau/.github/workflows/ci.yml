name: CI
on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  CI:
    name: CMake LGTM
    runs-on: ubuntu-latest

    steps:
      - name: LGTM
        run: echo "LGTM" #TODO, uncomment

# jobs:
#   UbuntuMacOS:
#     strategy:
#       fail-fast: false
#       matrix:
#         os: [ubuntu-latest, macOS-latest]
#         # build_type: [Debug, RelWithDebInfo, MinSizeRel, Release] 
#         build_type: [Release] 
#         compiler: [default, clang, gcc]
#         exclude:
#           - {os: "macOS-latest", compiler: "gcc"}  # not needed
#           - {os: "macOS-latest", compiler: "clang"} # handled by `default` 
          
#     runs-on: ${{ matrix.os }}
    
#     steps: 
#       - uses: actions/checkout@v1

#       - name: Create the Build Folder
#         run: |
#           mkdir ${{github.workspace}}/build
        
#       - name: Set up Compilers on Ubuntu
#         if: matrix.os == 'ubuntu-latest'
#         run: |
#           sudo apt-get install -y gcc-11 g++-10 clang-10
      
#       - name: Default Platform Compiler
#         shell: bash
#         if: matrix.compiler == 'default'
#         run: |
#           cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

#       - name: GCC (Ubuntu)
#         shell: bash
#         if: (matrix.compiler == 'gcc') && (matrix.os == 'ubuntu-latest')
#         run: |
#           cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=gcc-11 -DCMAKE_CXX_COMPILER=g++-10

#       - name: Clang (Ubuntu)
#         shell: bash
#         if: (matrix.compiler == 'clang') && (matrix.os == 'ubuntu-latest')
#         run: |
#           cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=clang-10 -DCMAKE_CXX_COMPILER=clang++-10

#       - name: Build
#         shell: bash
#         run: |
#           cmake --build build/ --config ${{ matrix.build_type }}

#       - name: Test
#         shell: bash
#         run: |
#           cd build/test && ./TauInternalTests
  

#   Windows:
#     runs-on: windows-latest
#     strategy:
#       fail-fast: false
#       matrix:
#         build_type: [Release]
#         compiler: [default, gcc, clang, clangcl]
#         version: [10, 11]
    
#     steps:
#       - uses: actions/checkout@v2

#       - name: Set up Clang on windows
#         if: matrix.compiler == 'clang'
#         run: |
#           curl -fsSL -o LLVM${{ matrix.version }}.exe https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ matrix.version }}.0.0/LLVM-${{ matrix.version }}.0.0-win64.exe ; 7z x LLVM${{ matrix.version }}.exe -y -o"C:/Program Files/LLVM"

#       - name: CMake (Default Compiler)
#         shell: bash
#         if: matrix.compiler == 'default'
#         run: |
#           cmake -S . -B build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_SYSTEM_VERSION="10.0.18362.0"

#       - name: CMake (GCC)
#         shell: bash
#         if: matrix.compiler == 'gcc'
#         run: |
#           cmake -S . -B build -G"MinGW Makefiles" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
      
#       - name: CMake (Clang)
#         shell: bash
#         if: matrix.compiler == 'clang'
#         run: |
#           cmake -S . -B build -G"MinGW Makefiles" -DCMAKE_C_COMPILER="C:/Program Files/LLVM/bin/clang.exe" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DTAU_BUILDINTERNALTESTS=On

#       - name: CMake (Clang Cl)
#         shell: bash
#         if: matrix.compiler == 'clangcl'
#         run: |
#           cmake -S . -B build -G "Visual Studio 16 2019" -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_C_COMPILER=clang-cl -DCMAKE_SYSTEM_VERSION="10.0.18362.0"

#       - name: Build
#         shell: bash
#         run: |
#           cmake --build build/ --config ${{ matrix.build_type }}
      
#       - name: Test (MSVC)
#         if: (matrix.compiler == 'default') || (matrix.compiler == 'clangcl')
#         run: cd build/test/${{ matrix.build_type }} ; dir; ./TauInternalTests

#       - name: Test (Clang/Ubuntu)
#         if: (matrix.compiler == 'gcc') || (matrix.compiler == 'clang')
#         run: cd build/test/ ; dir; ./TauInternalTests